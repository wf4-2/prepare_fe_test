const questions = [
  {
    id: 1,
    category: 'HTML',
    question: "HTML에서 `<meta charset='UTF-8'>` 태그의 역할은?",
    options: [
      '브라우저가 웹 페이지의 텍스트 인코딩을 정의하는 데 사용된다.',
      'HTML 문서의 제목을 정의한다.',
      'JavaScript 코드를 포함하는 데 사용된다.',
      'CSS 스타일을 적용하는 데 사용된다.',
    ],
    answer: 0,
  },
  {
    id: 2,
    category: 'HTML',
    question: "`<a>` 태그의 `target='_blank'` 속성은 무엇을 의미하는가?",
    options: [
      '같은 창에서 링크를 연다.',
      '새로운 창이나 새 탭에서 링크를 연다.',
      '기본적으로 링크를 차단한다.',
      '링크가 자동으로 다운로드되도록 한다.',
    ],
    answer: 1,
  },
  {
    id: 3,
    category: 'HTML',
    question:
      'HTML5에서 `<section>`, `<article>`, `<aside>` 태그는 무엇을 위해 사용되는가?',
    options: [
      '레이아웃을 만들기 위한 스타일링 요소',
      '페이지 내 논리적인 콘텐츠 그룹화를 위해 사용',
      'HTML4와의 하위 호환성을 위해 추가된 태그',
      '웹 접근성을 줄이기 위한 태그',
    ],
    answer: 1,
  },
  {
    id: 4,
    category: 'HTML',
    question:
      "`<input>` 태그에서 `type='email'`을 사용하면 자동으로 어떤 기능이 제공되는가?",
    options: [
      '이메일 입력란에 자동 완성 기능',
      '이메일 형식이 아닌 경우 자동 유효성 검사',
      '입력한 이메일을 자동으로 서버로 전송',
      '입력한 이메일이 암호화되어 저장됨',
    ],
    answer: 1,
  },
  {
    id: 5,
    category: 'HTML',
    question: '다음 중 HTML5에서 새롭게 추가된 `<input>` 타입이 아닌 것은?',
    options: ['color', 'range', 'number', 'password'],
    answer: 3,
  },
  {
    id: 6,
    category: 'HTML',
    question:
      '`<table>` 태그에서 `<thead>`, `<tbody>`, `<tfoot>`은 각각 무엇을 의미하는가?',
    options: [
      '테이블의 제목, 본문, 링크 영역을 정의',
      '테이블의 헤더, 본문, 푸터를 정의',
      '테이블의 높이, 너비, 테두리를 정의',
      '테이블에서 비어 있는 공간을 설정',
    ],
    answer: 1,
  },
  {
    id: 7,
    category: 'HTML',
    question: 'HTML에서 `alt` 속성이 반드시 필요한 태그는?',
    options: ['<a>', '<img>', '<video>', '<link>'],
    answer: 1,
  },
  {
    id: 8,
    category: 'HTML',
    question: '`<iframe>` 태그는 어떤 역할을 하는가?',
    options: [
      '외부 문서를 포함하는 기능을 제공',
      '웹 페이지의 스크롤 기능을 추가',
      '테이블을 정의하는 역할',
      'CSS 스타일을 적용하는 기능',
    ],
    answer: 0,
  },
  {
    id: 9,
    category: 'HTML',
    question: '`<video>` 태그에서 `controls` 속성을 추가하면 생기는 기능은?',
    options: [
      '비디오가 자동으로 재생됨',
      '비디오의 기본 컨트롤 UI가 표시됨',
      '비디오가 반복 재생됨',
      '비디오가 10초 후 자동 삭제됨',
    ],
    answer: 1,
  },
  {
    id: 10,
    category: 'HTML',
    question: '다음 중 `<form>` 태그 내에서 사용되지 않는 요소는?',
    options: ['<input>', '<button>', '<label>', '<div>'],
    answer: 3,
  },
  {
    id: 11,
    category: 'HTML',
    question:
      "`<form>` 태그에서 `method='post'` 방식이 `method='get'` 방식과 다른 점은?",
    options: [
      'post는 데이터를 URL에 노출하지 않는다.',
      'post는 브라우저의 캐시에 저장된다.',
      'post는 데이터를 255자 이하로 제한한다.',
      'post는 JavaScript에서만 사용할 수 있다.',
    ],
    answer: 0,
  },
  {
    id: 12,
    category: 'HTML',
    question: 'HTML에서 `<ol>`, `<ul>`, `<li>` 태그는 무엇을 위한 요소인가?',
    options: ['이미지 표시', '리스트(목록) 생성', '버튼 생성', '테이블 생성'],
    answer: 1,
  },
  {
    id: 13,
    category: 'HTML',
    question:
      '`<audio>` 태그에서 `autoplay` 속성을 추가하면 어떤 동작이 발생하는가?',
    options: [
      '오디오가 페이지 로드 시 자동으로 재생된다.',
      '오디오가 자동으로 반복된다.',
      '오디오 볼륨이 자동 조절된다.',
      '오디오가 자동으로 일시 정지된다.',
    ],
    answer: 0,
  },
  {
    id: 14,
    category: 'HTML',
    question: 'HTML5에서 `<canvas>` 태그는 무엇을 위해 사용되는가?',
    options: [
      '비디오 삽입',
      '이미지 렌더링',
      '동적인 그래픽 및 애니메이션 렌더링',
      '오디오 재생',
    ],
    answer: 2,
  },
  {
    id: 15,
    category: 'HTML',
    question:
      "`<meta name='viewport' content='width=device-width, initial-scale=1.0'>`는 어떤 역할을 하는가?",
    options: [
      '반응형 웹 디자인을 위해 화면 크기를 조절',
      '페이지 로딩 속도를 증가',
      '브라우저에서 HTML5 요소를 지원하도록 함',
      'HTML 문서의 제목을 변경',
    ],
    answer: 0,
  },
  {
    id: 16,
    category: 'HTML',
    question: '다음 중 HTML에서 `data-*` 속성이 제공하는 기능은?',
    options: [
      '데이터를 JavaScript에서 쉽게 다룰 수 있도록 도와줌',
      'CSS 스타일을 변경하는 속성',
      '이미지 태그에서만 사용 가능',
      'HTML에서 직접적으로 스타일을 추가하는 기능',
    ],
    answer: 0,
  },
  {
    id: 17,
    category: 'HTML',
    question: '`<progress>` 태그는 어떤 역할을 하는가?',
    options: [
      '페이지의 로딩 상태를 표시',
      '현재 진행 상태를 나타내는 바(bar)를 생성',
      '페이지 스크롤 비율을 측정',
      'JavaScript 없이 애니메이션을 자동으로 추가',
    ],
    answer: 1,
  },
  {
    id: 18,
    category: 'HTML',
    question: '`<datalist>` 태그의 역할은 무엇인가?',
    options: [
      '`<input>` 요소에 대한 자동 완성 목록을 제공',
      '테이블 데이터를 정리하는 기능 제공',
      'HTML에서 데이터를 JSON 형식으로 변환',
      '`<table>` 내에서 특정 데이터를 강조하는 기능',
    ],
    answer: 0,
  },
  {
    id: 19,
    category: 'HTML',
    question: '`<mark>` 태그는 어떤 역할을 하는가?',
    options: [
      '특정 텍스트를 강조 표시',
      '문서의 중요한 부분을 표시',
      'JavaScript 코드와 연결되는 태그',
      'CSS 스타일을 적용하는 태그',
    ],
    answer: 0,
  },
  {
    id: 20,
    category: 'HTML',
    question: 'HTML에서 `<abbr>` 태그는 어떤 역할을 하는가?',
    options: [
      '텍스트를 작은 크기로 표시',
      '줄임말(Abbreviation)을 나타내며 툴팁을 제공할 수 있음',
      '단락을 강조',
      '큰 글씨로 텍스트를 표시',
    ],
    answer: 1,
  },

  {
    id: 21,
    category: 'CSS',
    question:
      'CSS에서 `position: absolute;`를 적용하면 요소의 위치는 어떻게 결정되는가?',
    options: [
      '가장 가까운 position이 지정된 조상 요소를 기준으로 배치됨',
      '부모 요소의 `absolute` 위치를 기준으로 배치됨',
      '브라우저 뷰포트를 기준으로 배치됨',
      '항상 좌측 상단(0,0) 위치에서 배치됨',
    ],
    answer: 0,
  },
  {
    id: 22,
    category: 'CSS',
    question:
      '`display: flex;`를 적용한 요소에서 `justify-content: space-between;` 속성은 어떤 역할을 하는가?',
    options: [
      '아이템을 왼쪽 정렬함',
      '아이템을 오른쪽 정렬함',
      '아이템 사이에 동일한 간격을 둠 (양쪽 끝 아이템은 좌우에 붙음)',
      '아이템을 중앙 정렬함',
    ],
    answer: 2,
  },
  {
    id: 23,
    category: 'CSS',
    question: '`z-index` 속성은 언제 적용되는가?',
    options: [
      '`position: static;` 상태에서도 사용 가능',
      '`position: relative, absolute, fixed`가 설정된 요소에만 적용됨',
      '`z-index` 값이 클수록 뒤에 배치됨',
      '`z-index`는 가로 정렬을 조정하는 속성임',
    ],
    answer: 1,
  },
  {
    id: 24,
    category: 'CSS',
    question: '`opacity: 0.5;`를 적용하면 어떤 효과가 발생하는가?',
    options: [
      '요소가 흐려지면서 투명도가 50%가 됨',
      '요소가 완전히 사라짐',
      '배경색만 반투명해지고, 글씨는 유지됨',
      '요소 크기가 절반으로 줄어듦',
    ],
    answer: 0,
  },
  {
    id: 25,
    category: 'CSS',
    question: '`transition: all 0.5s ease-in-out;` 속성의 역할은?',
    options: [
      '요소의 모든 스타일 변화에 0.5초 동안 부드러운 전환 효과 적용',
      '요소의 배경색만 변경됨',
      '요소가 회전하는 효과를 추가함',
      '`hover` 상태에서만 작동하는 애니메이션 효과 추가',
    ],
    answer: 0,
  },
  {
    id: 26,
    category: 'CSS',
    question: '`nth-child(odd)` 선택자는 어떤 요소를 선택하는가?',
    options: [
      '홀수 번째 요소만 선택',
      '짝수 번째 요소만 선택',
      '첫 번째 요소만 선택',
      '마지막 요소만 선택',
    ],
    answer: 0,
  },
  {
    id: 27,
    category: 'CSS',
    question: '`max-width: 100%;`을 적용하면 어떤 효과가 발생하는가?',
    options: [
      '요소가 부모 요소의 너비보다 커질 수 없음',
      '요소의 너비가 항상 100px로 고정됨',
      '요소가 무조건 뷰포트 크기에 맞춰짐',
      '요소가 최소 크기로 줄어듦',
    ],
    answer: 0,
  },
  {
    id: 28,
    category: 'CSS',
    question: '`border-radius: 50%;` 속성은 어떤 역할을 하는가?',
    options: [
      '요소를 원형으로 만든다.',
      '요소의 크기를 50% 줄인다.',
      '요소를 자동으로 중앙 정렬한다.',
      '요소의 배경색을 투명하게 만든다.',
    ],
    answer: 0,
  },
  {
    id: 29,
    category: 'CSS',
    question: '`overflow: hidden;` 속성의 역할은?',
    options: [
      '요소 내용이 넘칠 경우 스크롤을 생성함',
      '요소 내용이 넘칠 경우 숨김 처리함',
      '요소를 화면에서 숨김',
      '요소의 배경색을 제거함',
    ],
    answer: 1,
  },
  {
    id: 30,
    category: 'CSS',
    question: '`flex-grow: 1;`을 적용하면 어떤 변화가 생기는가?',
    options: [
      '요소가 가능한 만큼 남은 공간을 차지함',
      '요소가 항상 동일한 크기를 유지함',
      '요소의 높이가 100%로 설정됨',
      '요소의 크기가 줄어듦',
    ],
    answer: 0,
  },
  {
    id: 31,
    category: 'CSS',
    question: '`visibility: hidden;`과 `display: none;`의 차이점은?',
    options: [
      '둘 다 화면에서 요소를 숨기지만, `visibility: hidden;`은 공간을 유지하고 `display: none;`은 공간을 제거함',
      '둘 다 동일하게 작동함',
      '`visibility: hidden;`은 요소를 완전히 삭제함',
      '`display: none;`은 요소를 투명하게 만듦',
    ],
    answer: 0,
  },
  {
    id: 32,
    category: 'CSS',
    question: 'CSS에서 `text-align: center;`는 어떤 요소에 적용되는가?',
    options: [
      '블록 요소의 수평 정렬',
      '인라인 요소의 수직 정렬',
      '전체 페이지 중앙 정렬',
      '부모 요소를 기준으로 수직 정렬',
    ],
    answer: 0,
  },
  {
    id: 33,
    category: 'CSS',
    question: '`box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.3);`의 의미는?',
    options: [
      '`x`축 5px, `y`축 5px, 블러 10px의 그림자를 추가',
      '요소 크기를 5px 줄임',
      '요소 테두리를 5px로 설정',
      '요소를 오른쪽으로 10px 이동',
    ],
    answer: 0,
  },
  {
    id: 34,
    category: 'CSS',
    question: '`object-fit: cover;` 속성은 어떤 요소에 적용되는가?',
    options: [
      '`img` 태그의 배경 이미지를 요소 크기에 맞게 채움',
      '`div` 요소의 크기를 조절',
      '텍스트 크기를 자동으로 조절',
      '요소의 높이를 100%로 설정',
    ],
    answer: 0,
  },
  {
    id: 35,
    category: 'CSS',
    question: '`clip-path` 속성은 어떤 역할을 하는가?',
    options: [
      '요소의 특정 영역만 보이도록 잘라냄',
      '요소를 배경색으로 채움',
      '요소의 텍스트를 강조함',
      '요소를 원형으로 변경함',
    ],
    answer: 0,
  },
  {
    id: 36,
    category: 'CSS',
    question: '`filter: blur(5px);`의 효과는?',
    options: [
      '요소에 5px만큼 흐림(블러) 효과를 적용',
      '요소를 5px 이동',
      '요소의 색상을 반전',
      '요소를 화면에서 숨김',
    ],
    answer: 0,
  },
  {
    id: 37,
    category: 'CSS',
    question: '`position: sticky;`의 동작 방식은?',
    options: [
      '스크롤 시 요소가 특정 위치에서 고정됨',
      '요소가 항상 화면 상단에 고정됨',
      '요소가 부모 요소에 따라 상대적으로 배치됨',
      '요소가 항상 중앙에 배치됨',
    ],
    answer: 0,
  },
  {
    id: 41,
    category: 'JavaScript',
    question:
      'typeof 연산자를 사용하면 변수의 타입을 문자열로 반환하는데, 다음 중 typeof null의 결과는 무엇인가?',
    options: ['null', 'undefined', 'object', 'string'],
    answer: 2,
  },
  {
    id: 42,
    category: 'JavaScript',
    question: 'JavaScript에서 `const`로 선언한 변수에 대해 올바른 설명은?',
    options: [
      '재할당이 가능하다.',
      '선언 후 초기화하지 않아도 된다.',
      '선언과 동시에 초기화해야 하며, 재할당이 불가능하다.',
      '`let`과 동일하게 동작한다.',
    ],
    answer: 2,
  },
  {
    id: 43,
    category: 'JavaScript',
    question:
      "다음 코드 실행 결과는?\n\n```js\nconsole.log(0 == '0');\nconsole.log(0 === '0');\n```",
    options: [
      '`true, true`',
      '`true, false`',
      '`false, true`',
      '`false, false`',
    ],
    answer: 1,
  },
  {
    id: 44,
    category: 'JavaScript',
    question: '`setTimeout()` 함수의 동작 방식은?',
    options: [
      '즉시 실행된다.',
      '특정 시간이 지난 후 실행된다.',
      '루프를 차단하고 실행된다.',
      '콜백 함수를 동기적으로 실행한다.',
    ],
    answer: 1,
  },
  {
    id: 45,
    category: 'JavaScript',
    question: 'JavaScript에서 `this` 키워드는 무엇을 가리키는가?',
    options: [
      '항상 `window` 객체를 가리킨다.',
      '선언된 함수 내부에서는 `null`을 가리킨다.',
      '호출된 문맥(context)에 따라 달라진다.',
      '항상 전역 객체를 가리킨다.',
    ],
    answer: 2,
  },
  {
    id: 46,
    category: 'JavaScript',
    question: '`map()`과 `forEach()`의 차이점은?',
    options: [
      '`map()`은 배열을 반환하고, `forEach()`는 반환하지 않는다.',
      '`forEach()`는 새로운 배열을 반환한다.',
      '`map()`은 반복을 지원하지 않는다.',
      '둘은 동일한 역할을 수행한다.',
    ],
    answer: 0,
  },
  {
    id: 47,
    category: 'JavaScript',
    question: '`Object.keys(obj)`의 반환 값은?',
    options: [
      '객체의 모든 값을 배열로 반환한다.',
      '객체의 모든 키를 배열로 반환한다.',
      '객체의 키-값 쌍을 배열로 반환한다.',
      '객체의 프로토타입을 반환한다.',
    ],
    answer: 1,
  },
  {
    id: 48,
    category: 'JavaScript',
    question: 'JavaScript에서 `Promise` 객체의 주요 상태가 아닌 것은?',
    options: ['`pending`', '`fulfilled`', '`rejected`', '`executed`'],
    answer: 3,
  },
  {
    id: 49,
    category: 'JavaScript',
    question: '`localStorage`와 `sessionStorage`의 차이점은?',
    options: [
      '`localStorage`는 세션이 종료되면 사라진다.',
      '`sessionStorage`는 영구 저장된다.',
      '`localStorage`는 브라우저를 닫아도 유지된다.',
      '`sessionStorage`는 다른 브라우저 창에서도 공유된다.',
    ],
    answer: 2,
  },
  {
    id: 50,
    category: 'JavaScript',
    question: 'JavaScript에서 `event.preventDefault();`의 역할은?',
    options: [
      '이벤트의 기본 동작을 막는다.',
      '이벤트 실행을 취소한다.',
      '이벤트를 강제로 실행한다.',
      '이벤트 리스너를 제거한다.',
    ],
    answer: 0,
  },
  {
    id: 51,
    category: 'JavaScript',
    question: '`filter()` 메서드의 역할은?',
    options: [
      '배열의 특정 조건을 만족하는 요소만 남긴 새 배열을 반환한다.',
      '배열의 요소를 모두 변경한다.',
      '배열을 문자열로 변환한다.',
      '배열을 정렬한다.',
    ],
    answer: 0,
  },
  {
    id: 52,
    category: 'JavaScript',
    question: '`async/await`의 주요 특징은?',
    options: [
      '비동기 코드를 동기적으로 실행할 수 있다.',
      '`await`는 `Promise`가 아닌 값에도 사용할 수 있다.',
      '`async` 함수 내부에서만 `await`를 사용할 수 있다.',
      '`A와 C가 모두 정답이다.`',
    ],
    answer: 3,
  },
  {
    id: 53,
    category: 'JavaScript',
    question: '`JSON.parse()`와 `JSON.stringify()`의 역할은?',
    options: [
      '`JSON.stringify()`는 객체를 문자열로 변환하고, `JSON.parse()`는 문자열을 객체로 변환한다.',
      '`JSON.stringify()`는 문자열을 객체로 변환하고, `JSON.parse()`는 객체를 문자열로 변환한다.',
      '둘 다 JSON을 배열로 변환한다.',
      '`JSON.parse()`는 비동기적으로 동작한다.',
    ],
    answer: 0,
  },
  {
    id: 54,
    category: 'JavaScript',
    question: "`document.querySelector('.class')`의 반환 값은?",
    options: [
      '해당 클래스를 가진 모든 요소를 배열로 반환한다.',
      '첫 번째로 매칭되는 요소 하나를 반환한다.',
      '모든 클래스를 문자열로 반환한다.',
      '해당 클래스를 가진 요소의 개수를 반환한다.',
    ],
    answer: 1,
  },
  {
    id: 55,
    category: 'JavaScript',
    question: '`splice()`와 `slice()`의 차이점은?',
    options: [
      '`splice()`는 원본 배열을 변경하지만, `slice()`는 원본 배열을 변경하지 않는다.',
      '`slice()`는 배열에서 요소를 삭제하지만, `splice()`는 새로운 배열을 반환한다.',
      '`splice()`는 배열을 정렬하지만, `slice()`는 그렇지 않다.',
      '둘 다 동일한 역할을 한다.',
    ],
    answer: 0,
  },
  {
    id: 56,
    category: 'JavaScript',
    question: '`reduce()` 메서드의 주요 목적은?',
    options: [
      '배열을 단일 값으로 줄이는 것이다.',
      '배열의 특정 요소를 제거하는 것이다.',
      '배열을 문자열로 변환하는 것이다.',
      '배열을 정렬하는 것이다.',
    ],
    answer: 0,
  },
  {
    id: 57,
    category: 'JavaScript',
    question: 'JavaScript에서 `NaN`의 의미는?',
    options: [
      '`Not a Null`',
      '`Not a Number`',
      '`No Any Number`',
      '`Never a Number`',
    ],
    answer: 1,
  },
  {
    id: 58,
    category: 'JavaScript',
    question: '`setInterval()` 함수는 어떻게 작동하는가?',
    options: [
      '일정 시간 후 한 번 실행된다.',
      '일정 시간마다 반복해서 실행된다.',
      '이벤트 발생 시 실행된다.',
      '비동기 코드와 관계없이 즉시 실행된다.',
    ],
    answer: 1,
  },
  {
    id: 61,
    category: 'React',
    question: 'React의 주요 특징이 아닌 것은?',
    options: [
      'Virtual DOM을 사용한다.',
      '단방향 데이터 흐름을 가진다.',
      'HTML과 JavaScript가 완전히 분리되어 있다.',
      '컴포넌트 기반 개발을 지원한다.',
    ],
    answer: 2,
  },
  {
    id: 62,
    category: 'React',
    question: 'React에서 상태(state)를 관리하는 올바른 방법은?',
    options: [
      '`this.state = { count: 0 }` 직접 변경',
      '`setState()` 또는 `useState()`를 사용하며, 복잡한 상태 관리는 `useReducer()`를 통해 변경가능',
      '`this.state.count++` 직접 값 증가',
      '`props`를 변경하여 상태 관리',
    ],
    answer: 1,
  },
  {
    id: 63,
    category: 'React',
    question: '`useEffect` 훅의 기본 목적은?',
    options: [
      '상태를 업데이트하는 역할',
      'DOM 요소를 직접 조작하는 역할',
      '컴포넌트가 마운트, 업데이트, 언마운트될 때 특정 로직을 실행하는 역할',
      'Redux 상태를 변경하는 역할',
    ],
    answer: 2,
  },
  {
    id: 64,
    category: 'React',
    question: 'React에서 `props`의 역할은?',
    options: [
      '부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 방법',
      '상태(state)를 저장하는 역할',
      'React에서 전역 변수를 관리하는 기능',
      '스타일을 적용하는 기능',
    ],
    answer: 0,
  },
  {
    id: 65,
    category: 'React',
    question: 'JSX에서 `class` 대신 사용해야 하는 속성은?',
    options: ['`css`', '`className`', '`style`', '`class`'],
    answer: 1,
  },
  {
    id: 66,
    category: 'React',
    question: 'React에서 이벤트 핸들러를 바인딩하는 올바른 방법은?',
    options: [
      '`<button onclick={handleClick}>클릭</button>`',
      '`<button onClick={() => handleClick()}>클릭</button>`',
      '`<button clickHandler={handleClick}>클릭</button>`',
      "`<button onClick='handleClick()'>클릭</button>`",
    ],
    answer: 1,
  },
  {
    id: 67,
    category: 'React',
    question: '`useState`의 반환값으로 올바른 것은?',
    options: [
      '`[변수, 함수]` 형태의 배열',
      '`{ 변수, 함수 }` 형태의 객체',
      '하나의 값만 반환',
      '`this.state`와 동일한 객체',
    ],
    answer: 0,
  },
  {
    id: 68,
    category: 'React',
    question: '`useEffect(() => {...}, [])`가 실행되는 타이밍은?',
    options: [
      '마운트될 때 한 번 실행되며, 이후 다시 실행되지 않음',
      '의존성이 변경될 때 실행',
      '언마운트될 때 실행',
      '렌더링될 때마다 실행',
    ],
    answer: 0,
  },
  {
    id: 69,
    category: 'React',
    question: 'React의 Virtual DOM이란?',
    options: [
      '실제 DOM을 대신하여 UI를 렌더링하는 가상 DOM 구조',
      'CSS를 동적으로 생성하는 기술',
      'HTML과 JavaScript의 통합 방식',
      '브라우저의 기본 렌더링 엔진',
    ],
    answer: 0,
  },
  {
    id: 70,
    category: 'React',
    question: '`useState`와 `useReducer`의 차이점은?',
    options: [
      '`useReducer`는 복잡한 상태 관리를 위한 대체제이다.',
      '`useState`는 Redux를 대체한다.',
      '`useReducer`는 상태를 변경할 수 없다.',
      '`useState`는 동기적으로 실행된다.',
    ],
    answer: 0,
  },
  {
    id: 71,
    category: 'React',
    question: '`React.memo`의 역할은?',
    options: [
      '동일한 `props`로 렌더링이 발생할 때, 불필요한 재렌더링을 방지',
      '함수형 컴포넌트를 클래스형으로 변환',
      'React의 상태 관리 라이브러리',
      '`useState`를 대체하는 기능',
    ],
    answer: 0,
  },
  {
    id: 72,
    category: 'React',
    question: '`useRef`의 주요 용도는?',
    options: [
      'DOM 요소에 접근하기 위해 사용',
      'Redux 상태 관리를 위한 기능',
      '비동기 데이터를 불러오는 기능',
      '이벤트 리스너를 바인딩하는 역할',
    ],
    answer: 0,
  },
  {
    id: 73,
    category: 'React',
    question: 'React에서 `key` 속성이 필요한 이유는?',
    options: [
      'Virtual DOM이 리스트의 변경을 인식하고 최적화할 수 있도록 돕기 위해',
      '모든 요소에 `key`를 부여해야 컴포넌트가 렌더링됨',
      '`key`는 CSS 스타일을 적용하는 데 사용됨',
      'React의 상태(state)를 변경하는 데 필요함',
    ],
    answer: 0,
  },
  {
    id: 74,
    category: 'React',
    question: 'React에서 `children` 프로퍼티는 무엇인가?',
    options: [
      '부모 컴포넌트에서 자식 컴포넌트로 전달된 내용',
      '상태를 변경하는 함수',
      '이벤트 핸들러를 저장하는 객체',
      'React의 내장 메서드',
    ],
    answer: 0,
  },
  {
    id: 75,
    category: 'React',
    question: '`useEffect`의 클린업(cleanup) 함수는 언제 실행되는가?',
    options: [
      '컴포넌트가 언마운트될 때 실행',
      '상태가 변경될 때 실행',
      '`useEffect`가 실행될 때마다 실행',
      '최초 렌더링 시 실행',
    ],
    answer: 0,
  },
  {
    id: 76,
    category: 'React',
    question: '`useState`의 기본값을 함수로 제공하는 이유는?',
    options: [
      '초기 렌더링 시 불필요한 연산을 방지하기 위해',
      '`useState`는 함수 컴포넌트에서 사용할 수 없기 때문',
      'Redux와의 호환성을 위해',
      '새로운 상태를 항상 `undefined`로 설정하기 위해',
    ],
    answer: 0,
  },
  {
    id: 77,
    category: 'React',
    question: 'React에서 상태 변경이 일어날 때, 다시 렌더링되는 이유는?',
    options: [
      'React는 변경된 상태를 감지하면 해당 컴포넌트를 다시 렌더링하기 때문',
      'DOM이 자동으로 변하기 때문',
      '`setTimeout()`이 실행되기 때문',
      'React는 변경된 상태를 렌더링하지 않음',
    ],
    answer: 0,
  },
  {
    id: 78,
    category: 'React',
    question: '`useContext` 훅의 역할은?',
    options: [
      '컴포넌트 트리에서 전역적으로 상태를 관리할 수 있도록 함',
      '상태를 변경하는 함수',
      'Virtual DOM을 최적화하는 기능',
      'Redux를 대체하는 기능',
    ],
    answer: 0,
  },
];
